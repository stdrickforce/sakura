#!/bin/bash
          RED="\[\033[0;31m\]"
       YELLOW="\[\033[1;33m\]"
        GREEN="\[\033[0;32m\]"
         BLUE="\[\033[1;34m\]"
        WHITE="\[\033[1;37m\]"
       PURPLE="\[\033[0;35m\]"
    LIGHT_RED="\[\033[1;31m\]"
  LIGHT_GREEN="\[\033[1;32m\]"
   LIGHT_GRAY="\[\033[0;37m\]"
 LIGHT_PURPLE="\[\033[1;35m\]"
        RESET="\[\033[0m\]"

# Detect whether the current directory is a git repository.
function is_git_repository {
  git branch > /dev/null 2>&1
}

# Determine the branch/state information for this git repository.
function set_git_branch {
  # Capture the output of the "git status" command.
  git_status="$(git status 2> /dev/null)"

  # Set color based on clean/staged/dirty.
  if [[ ${git_status} =~ "working tree clean" ]]; then
    state="${GREEN}"
  elif [[ ${git_status} =~ "Changes to be committed" ]]; then
    state="${YELLOW}"
  else
    state="${LIGHT_RED}"
  fi

  # Set arrow icon based on status against remote.
  remote_pattern="Your branch is (.*) of (.*)"
  if [[ ${git_status} =~ ${remote_pattern} ]]; then
    if [[ ${BASH_REMATCH[1]} == "ahead" ]]; then
      remote="↑"
    else
      remote="↓"
    fi
  else
    remote=""
  fi
  diverge_pattern="Your branch and (.*) have diverged"
  if [[ ${git_status} =~ ${diverge_pattern} ]]; then
    remote="↕"
  fi

  # Get the name of the branch.
  branch_pattern="^On branch ([^${IFS}]*)"
  if [[ ${git_status} =~ ${branch_pattern} ]]; then
    branch=${BASH_REMATCH[1]}
  fi

  # Set the final branch string.
  BRANCH="${state}(${branch})${remote}${RESET} "
}

# Return the prompt symbol to use, colorized based on the return value of the
# previous command.
function set_prompt_symbol () {
  if test $1 -eq 0 ; then
      PROMPT_SYMBOL="\$"
  else
      PROMPT_SYMBOL="${LIGHT_RED}\$${RESET}"
  fi
}

# Determine active Python virtualenv details.
function set_python_version () {

  version=$(python -c 'import sys; print(".".join(map(str, sys.version_info[:3])))' 2> /dev/null)

  PYTHON_VERSION="[py: $version]"
  if ! test -z "$VIRTUAL_ENV" ; then
    PYTHON_VERSION="[pyenv: `basename \"$VIRTUAL_ENV\"`]$PYTHON_VERSION"
  fi

  PYTHON_VERSION="${BLUE}${PYTHON_VERSION}${RESET}"
}

function set_php_version () {
  version="$(php -r 'echo phpversion();' 2> /dev/null)"
  PHP_VERSION="${LIGHT_PURPLE}[php: $version]${RESET}"
}

function set_ruby_version () {
  version="$(ruby -v | awk '{print $2}')"
  RUBY_VERSION="${LIGHT_RED}[ruby: $version]${RESET}"
}

function set_node_version () {
  version="$(node --version 2> /dev/null)"
  NODE_VERSION="${LIGHT_GREEN}[node: $version]${RESET}"
}

# Set the full bash prompt.
function set_bash_prompt () {
  # Set the PROMPT_SYMBOL variable. We do this first so we don't lose the
  # return value of the last command.
  set_prompt_symbol $?

  # Set the PYTHON_VERSION variable.
  set_python_version

  # Set the PHP_VERSION variable.
  set_php_version

  # Set the RUBY_VERSION variable.
  set_ruby_version

  # Set the NODE_VERSION variable.
  set_node_version

  # Set the BRANCH variable.
  if is_git_repository ; then
    set_git_branch
  else
    BRANCH=''
  fi

  # Set the bash prompt variable.
  PS1="
${PYTHON_VERSION}${PHP_VERSION}${RUBY_VERSION}${NODE_VERSION}
${GREEN}\u@\h ${YELLOW}\w${RESET} ${BRANCH}
${PROMPT_SYMBOL} "
}

# Tell bash to execute this function just before displaying its prompt.
PROMPT_COMMAND=set_bash_prompt
